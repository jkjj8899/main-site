name: 自动创建子仓库并初始化

on:
  push:
    paths:
      - 'products.json'
    branches:
      - main

jobs:
  create-repos:
    runs-on: ubuntu-latest
    steps:
      - name: 克隆主仓库
        uses: actions/checkout@v3

      - name: 配置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 安装依赖
        run: npm install axios

      - name: 执行自动建仓初始化
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GH_USERNAME: jkjj8899  # ← 替换为你自己的用户名
        run: |
          node <<'EOF'
const fs = require('fs');
const axios = require('axios');

const GH_TOKEN = process.env.GH_TOKEN;
const USERNAME = process.env.GH_USERNAME;
const headers = {
  Authorization: `token ${GH_TOKEN}`,
  Accept: 'application/vnd.github.v3+json'
};

const products = JSON.parse(fs.readFileSync('products.json', 'utf-8'));

async function repoExists(repo) {
  try {
    await axios.get(`https://api.github.com/repos/${USERNAME}/${repo}`, { headers });
    return true;
  } catch (err) {
    return false;
  }
}

async function createRepo(slug, description) {
  await axios.post(`https://api.github.com/user/repos`, {
    name: slug,
    private: false,
    description
  }, { headers });
}

async function pushFile(repo, path, content, message) {
  const encoded = Buffer.from(content).toString('base64');
  await axios.put(`https://api.github.com/repos/${USERNAME}/${repo}/contents/${path}`, {
    message,
    content: encoded,
    branch: "main"
  }, { headers });
}

async function enablePages(repo) {
  try {
    await axios.post(`https://api.github.com/repos/${USERNAME}/${repo}/pages`, {
      source: {
        branch: "main",
        path: "/"
      }
    }, { headers });
  } catch (e) {
    console.error(`❌ 无法启用 Pages: ${repo}`, e.message);
  }
}

(async () => {
  for (const p of products) {
    const exists = await repoExists(p.slug);
    if (!exists) {
  console.log(`🆕 创建仓库: ${p.slug}`);
  await createRepo(p.slug, p.description);
} else {
  console.log(`♻️ 仓库已存在，继续更新: ${p.slug}`);
}

// ✅ 获取图集文件列表
let images = [];
try {
  const res = await axios.get(`https://api.github.com/repos/${USERNAME}/product-site/contents/assets/${p.slug}`, { headers });
  images = res.data
    .filter(item => item.type === 'file' && /\.(jpe?g|png|webp|gif)$/i.test(item.name))
    .map(item => `https://raw.githubusercontent.com/${USERNAME}/product-site/main/assets/${p.slug}/${item.name}`);
  console.log(`📸 读取图集 ${images.length} 张 for ${p.slug}`);
} catch (e) {
  console.warn(`⚠️ 图集读取失败: ${p.slug}`, e.message);
}

// ✅ 写入包含 images 的 .product.json
const productJson = {
  name: p.name,
  description: p.description,
  slug: p.slug,
  icon: p.icon,
  link: p.link,
  images: images || []
};

console.log("➡️ 即将写入 .product.json:", JSON.stringify(productJson, null, 2));
await pushFile(p.slug, ".product.json", JSON.stringify(productJson, null, 2), "init .product.json");
await pushFile(p.slug, "index.html", html, "init index.html");
await enablePages(p.slug);`);
    }
  }
})();

          EOF
